/*261. Graph Valid Tree   QuestionEditorial Solution  My Submissions
Difficulty: Medium
Contributors: Admin
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Hint:
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree?
According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.
*/
class Solution {
public:
    bool validTree(int n, vector<pair<int, int>>& edges) {
        //因为这里题目说明了，不会有重复的点，所以我们只需要比较edges的数和node的数量即可知道是否全部的node连接上了
        int parent[n];
        //先初始化，每个节点的parent都指向自己
        for(int i = 0; i < n; i++){parent[i] = i;}
        
        for(int i = 0; i < edges.size(); i++){//这里是edges.size()， which is n - 1, not n!!
            int f = edges[i].first;
            int s = edges[i].second;
            //当每个节点的parent节点不为自己的时候，我们就一直循环，寻找他的最深的父节点
            while(f != parent[f]) {f = parent[f];}
            while(s != parent[s]) {s = parent[s];}
            //如果父节点一样，那么就形成了环。
            if(f == s){return false;}
            //给现在的这个end节点赋予新的父节点
            parent[s] = f;
        }
        return edges.size() == n - 1;
    }
};
